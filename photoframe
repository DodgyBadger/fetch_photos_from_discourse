#!/bin/bash

# Photoframe management script
# Commands: install, reschedule, stop, uninstall

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_DIR="$SCRIPT_DIR"
VENV_DIR="$APP_DIR/venv"
CRON_FILE="/tmp/photoframe_cron"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Print usage information
usage() {
    echo "Usage: $0 [command]"
    echo
    echo "Commands:"
    echo "  install     Install dependencies and set up cron job"
    echo "  reschedule  Change the schedule of the cron job"
    echo "  stop        Stop the running photoframe process"
    echo "  uninstall   Remove cron job and virtual environment"
    echo
    exit 1
}

# Install command - sets up virtual environment and cron job
install() {
    echo -e "${GREEN}Installing photoframe...${NC}"
    
    # Detect package manager (apt or homebrew)
    if command -v apt &> /dev/null; then
        PKG_MANAGER="apt"
    elif command -v brew &> /dev/null; then
        PKG_MANAGER="brew"
    else
        echo -e "${RED}Neither apt nor Homebrew found. Please install one of them:${NC}"
        echo "For Homebrew: https://brew.sh/"
        echo "For apt: This should be available on Debian/Ubuntu systems"
        exit 1
    fi
    
    # Check if uv is installed, install if not
    if ! command -v uv &> /dev/null; then
        echo "Installing uv..."
        if [ "$PKG_MANAGER" = "brew" ]; then
            brew install astral-sh/tap/uv
        elif [ "$PKG_MANAGER" = "apt" ]; then
            echo "Installing uv dependencies..."
            sudo apt update
            sudo apt install -y curl build-essential
            
            echo "Installing uv from binary release..."
            curl -LsSf https://astral.sh/uv/install.sh | sh
            
            # Add uv to PATH for this session if it's not already there
            if ! command -v uv &> /dev/null; then
                # Try different possible installation paths
                if [ -d "$HOME/.local/bin" ]; then
                    export PATH="$HOME/.local/bin:$PATH"
                fi
                if [ -d "$HOME/.cargo/bin" ]; then
                    export PATH="$HOME/.cargo/bin:$PATH"
                fi
                
                # Source the environment file if it exists
                if [ -f "$HOME/.local/bin/env" ]; then
                    source "$HOME/.local/bin/env"
                fi
            fi
        fi
    fi
    
    # Verify uv is now available
    if ! command -v uv &> /dev/null; then
        echo -e "${YELLOW}uv not found in PATH. Trying to locate it...${NC}"
        
        # Check common installation locations
        UV_PATHS=(
            "$HOME/.local/bin/uv"
            "$HOME/.cargo/bin/uv"
        )
        
        UV_FOUND=false
        for UV_PATH in "${UV_PATHS[@]}"; do
            if [ -x "$UV_PATH" ]; then
                echo "Found uv at $UV_PATH"
                UV_FOUND=true
                # Use the full path to uv for the rest of the script
                UV_CMD="$UV_PATH"
                break
            fi
        done
        
        if [ "$UV_FOUND" = false ]; then
            echo -e "${RED}Failed to install uv. Please install it manually:${NC}"
            echo "https://github.com/astral-sh/uv"
            echo "After installing, add it to your PATH and run this script again."
            exit 1
        fi
    else
        UV_CMD="uv"
    fi
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "$VENV_DIR" ]; then
        echo "Creating virtual environment using uv..."
        $UV_CMD venv "$VENV_DIR"
    fi
    
    # Install dependencies using uv
    echo "Installing dependencies with uv..."
    $UV_CMD pip install --python "$VENV_DIR/bin/python" -r "$APP_DIR/requirements.txt"
    
    # Get FETCH_INTERVAL from .env or default to hourly
    if [ -f "$APP_DIR/.env" ]; then
        FETCH_INTERVAL=$(grep -E "^FETCH_INTERVAL=" "$APP_DIR/.env" | cut -d= -f2)
    fi
    
    # Default to hourly if FETCH_INTERVAL not found or empty
    if [ -z "$FETCH_INTERVAL" ]; then
        FETCH_INTERVAL="0 * * * *"  # Default: hourly
        echo "FETCH_INTERVAL not found in .env, defaulting to hourly schedule."
    fi
    
    # Set up cron job with the interval from .env
    setup_cron "$FETCH_INTERVAL"
    
    echo -e "${GREEN}Installation complete!${NC}"
    echo "Photoframe will run with schedule: $FETCH_INTERVAL"
    echo "Use '$0 reschedule' to change the schedule."
}

# Reschedule command - changes the job schedule
reschedule() {
    echo -e "${YELLOW}Rescheduling photoframe...${NC}"
    
    local scheduler=$(detect_scheduler)
    
    case "$scheduler" in
        "cron")
            echo "Enter new cron schedule (e.g., '0 * * * *' for hourly):"
            read -r schedule
            ;;
        "systemd")
            echo "Enter schedule (hourly, daily, weekly, monthly, or cron format '0 * * * *'):"
            read -r schedule
            ;;
        "launchd")
            echo "Enter interval in hours (1, 2, 6, 24):"
            read -r hours
            # Convert hours to cron-like format for our internal handling
            case "$hours" in
                "1") schedule="0 * * * *" ;;
                "2") schedule="0 */2 * * *" ;;
                "6") schedule="0 */6 * * *" ;;
                "24") schedule="0 0 * * *" ;;
                *) 
                    echo "Invalid interval. Using hourly."
                    schedule="0 * * * *"
                    ;;
            esac
            ;;
        *)
            echo "Enter new cron schedule (e.g., '0 * * * *' for hourly):"
            read -r schedule
            ;;
    esac
    
    setup_cron "$schedule"
    
    echo -e "${GREEN}Photoframe rescheduled!${NC}"
}

# Detect the system's scheduler
detect_scheduler() {
    if [ "$(uname)" = "Darwin" ]; then
        echo "launchd"
    elif command -v systemctl &> /dev/null && systemctl --version | grep -q "systemd"; then
        echo "systemd"
    elif command -v crontab &> /dev/null; then
        echo "cron"
    else
        echo "unknown"
    fi
}

# Helper function to set up scheduled job
setup_cron() {
    local schedule="$1"
    local scheduler=$(detect_scheduler)
    
    case "$scheduler" in
        "cron")
            setup_cron_job "$schedule"
            ;;
        "systemd")
            setup_systemd_timer "$schedule"
            ;;
        "launchd")
            setup_launchd_job "$schedule"
            ;;
        *)
            echo -e "${YELLOW}Unknown scheduler system. Falling back to cron...${NC}"
            setup_cron_job "$schedule"
            ;;
    esac
}

# Set up traditional cron job
setup_cron_job() {
    local schedule="$1"
    
    # Remove existing cron job if any
    crontab -l 2>/dev/null | grep -v "$APP_DIR/src/photoframe.py" > "$CRON_FILE" || true
    
    # Add new cron job with full path to python in the virtual environment
    echo "$schedule cd $APP_DIR && $VENV_DIR/bin/python $APP_DIR/src/photoframe.py" >> "$CRON_FILE"
    
    # Install new crontab
    crontab "$CRON_FILE"
    rm "$CRON_FILE"
    
    echo "Cron job set with schedule: $schedule"
}

# Set up systemd timer
setup_systemd_timer() {
    local schedule="$1"
    local service_file="$HOME/.config/systemd/user/photoframe.service"
    local timer_file="$HOME/.config/systemd/user/photoframe.timer"
    
    # Create systemd user directory if it doesn't exist
    mkdir -p "$HOME/.config/systemd/user"
    
    # Convert cron schedule to systemd timer format
    # This is a simplified conversion and may not handle all cron formats
    local minute=$(echo "$schedule" | awk '{print $1}')
    local hour=$(echo "$schedule" | awk '{print $2}')
    local day=$(echo "$schedule" | awk '{print $3}')
    local month=$(echo "$schedule" | awk '{print $4}')
    local weekday=$(echo "$schedule" | awk '{print $5}')
    
    local systemd_schedule=""
    
    # Handle common cases
    if [ "$minute" = "0" ] && [ "$hour" = "*" ]; then
        systemd_schedule="hourly"
    elif [ "$minute" = "0" ] && [ "$hour" = "0" ]; then
        systemd_schedule="daily"
    elif [ "$minute" = "0" ] && [ "$hour" = "0" ] && [ "$weekday" = "0" ]; then
        systemd_schedule="weekly"
    elif [ "$minute" = "0" ] && [ "$hour" = "0" ] && [ "$day" = "1" ]; then
        systemd_schedule="monthly"
    else
        # Default to hourly if conversion is complex
        systemd_schedule="hourly"
        echo -e "${YELLOW}Complex cron schedule detected. Defaulting to hourly.${NC}"
    fi
    
    # Create service file
    cat > "$service_file" << EOF
[Unit]
Description=Photoframe Service
After=network.target

[Service]
Type=oneshot
WorkingDirectory=$APP_DIR
ExecStart=$VENV_DIR/bin/python $APP_DIR/src/photoframe.py
Environment="PATH=$PATH"

[Install]
WantedBy=default.target
EOF

    # Create timer file
    cat > "$timer_file" << EOF
[Unit]
Description=Run Photoframe on schedule
Requires=photoframe.service

[Timer]
Unit=photoframe.service
OnCalendar=$systemd_schedule

[Install]
WantedBy=timers.target
EOF

    # Enable and start the timer
    systemctl --user daemon-reload
    systemctl --user enable photoframe.timer
    systemctl --user start photoframe.timer
    
    echo "Systemd timer set with schedule: $systemd_schedule"
}

# Set up launchd job (macOS)
setup_launchd_job() {
    local schedule="$1"
    local plist_file="$HOME/Library/LaunchAgents/com.user.photoframe.plist"
    
    # Create LaunchAgents directory if it doesn't exist
    mkdir -p "$HOME/Library/LaunchAgents"
    
    # Convert cron schedule to launchd interval
    # This is a simplified conversion and may not handle all cron formats
    local interval=3600  # Default to hourly (3600 seconds)
    
    # Handle common cases based on the cron schedule
    if [ "$schedule" = "0 * * * *" ]; then
        interval=3600  # Hourly
    elif [ "$schedule" = "0 */2 * * *" ]; then
        interval=7200  # Every 2 hours
    elif [ "$schedule" = "0 */6 * * *" ]; then
        interval=21600  # Every 6 hours
    elif [ "$schedule" = "0 0 * * *" ]; then
        interval=86400  # Daily
    else
        echo -e "${YELLOW}Complex cron schedule detected. Defaulting to hourly.${NC}"
    fi
    
    # Create plist file
    cat > "$plist_file" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.user.photoframe</string>
    <key>ProgramArguments</key>
    <array>
        <string>$VENV_DIR/bin/python</string>
        <string>$APP_DIR/src/photoframe.py</string>
    </array>
    <key>WorkingDirectory</key>
    <string>$APP_DIR</string>
    <key>StartInterval</key>
    <integer>$interval</integer>
    <key>RunAtLoad</key>
    <true/>
</dict>
</plist>
EOF

    # Load the plist
    launchctl unload "$plist_file" 2>/dev/null || true
    launchctl load -w "$plist_file"
    
    echo "Launchd job set with interval: $interval seconds"
}

# Uninstall command - removes scheduled job and virtual environment
uninstall() {
    echo -e "${YELLOW}Uninstalling photoframe...${NC}"
    
    local scheduler=$(detect_scheduler)
    
    # Remove scheduled job based on scheduler type
    case "$scheduler" in
        "cron")
            # Remove cron job
            crontab -l 2>/dev/null | grep -v "$APP_DIR/src/photoframe.py" > "$CRON_FILE" || true
            crontab "$CRON_FILE"
            rm -f "$CRON_FILE"
            echo "Removed cron job."
            ;;
        "systemd")
            # Remove systemd timer and service
            systemctl --user stop photoframe.timer 2>/dev/null || true
            systemctl --user disable photoframe.timer 2>/dev/null || true
            systemctl --user stop photoframe.service 2>/dev/null || true
            systemctl --user disable photoframe.service 2>/dev/null || true
            
            rm -f "$HOME/.config/systemd/user/photoframe.timer"
            rm -f "$HOME/.config/systemd/user/photoframe.service"
            systemctl --user daemon-reload
            echo "Removed systemd timer and service."
            ;;
        "launchd")
            # Remove launchd job
            local plist_file="$HOME/Library/LaunchAgents/com.user.photoframe.plist"
            launchctl unload "$plist_file" 2>/dev/null || true
            rm -f "$plist_file"
            echo "Removed launchd job."
            ;;
        *)
            echo "Unknown scheduler. Attempting to remove cron job..."
            crontab -l 2>/dev/null | grep -v "$APP_DIR/src/photoframe.py" > "$CRON_FILE" || true
            crontab "$CRON_FILE"
            rm -f "$CRON_FILE"
            ;;
    esac
    
    # Ask before removing virtual environment
    echo -n "Remove virtual environment? [y/N] "
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo "Removing virtual environment..."
        rm -rf "$VENV_DIR"
    fi
    
    echo -e "${GREEN}Photoframe uninstalled.${NC}"
}

# Main script logic
if [ $# -eq 0 ]; then
    usage
fi

case "$1" in
    install)
        install
        ;;
    reschedule)
        reschedule
        ;;
    uninstall)
        uninstall
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        usage
        ;;
esac
