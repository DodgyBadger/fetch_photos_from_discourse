#!/bin/bash

# Photoframe management script
# Commands: install, reschedule, stop, uninstall

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_DIR="$SCRIPT_DIR"
VENV_DIR="$APP_DIR/venv"
CRON_FILE="/tmp/photoframe_cron"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Print usage information
usage() {
    echo "Usage: $0 [command]"
    echo
    echo "Commands:"
    echo "  install     Install dependencies and set up cron job"
    echo "  reschedule  Change the schedule of the cron job"
    echo "  stop        Stop the running photoframe process"
    echo "  uninstall   Remove cron job and virtual environment"
    echo
    exit 1
}

# Install command - sets up virtual environment and cron job
install() {
    echo -e "${GREEN}Installing photoframe...${NC}"
    
    # Detect package manager (apt or homebrew)
    if command -v apt &> /dev/null; then
        PKG_MANAGER="apt"
    elif command -v brew &> /dev/null; then
        PKG_MANAGER="brew"
    else
        echo -e "${RED}Neither apt nor Homebrew found. Please install one of them:${NC}"
        echo "For Homebrew: https://brew.sh/"
        echo "For apt: This should be available on Debian/Ubuntu systems"
        exit 1
    fi
    
    # Check if uv is installed, install if not
    if ! command -v uv &> /dev/null; then
        echo "Installing uv..."
        if [ "$PKG_MANAGER" = "brew" ]; then
            brew install astral-sh/tap/uv
        elif [ "$PKG_MANAGER" = "apt" ]; then
            echo "Installing uv dependencies..."
            sudo apt update
            sudo apt install -y curl build-essential
            
            echo "Installing uv from binary release..."
            curl -LsSf https://astral.sh/uv/install.sh | sh
            
            # Add uv to PATH for this session if it's not already there
            if ! command -v uv &> /dev/null; then
                # Try different possible installation paths
                if [ -d "$HOME/.local/bin" ]; then
                    export PATH="$HOME/.local/bin:$PATH"
                fi
                if [ -d "$HOME/.cargo/bin" ]; then
                    export PATH="$HOME/.cargo/bin:$PATH"
                fi
                
                # Source the environment file if it exists
                if [ -f "$HOME/.local/bin/env" ]; then
                    source "$HOME/.local/bin/env"
                fi
            fi
        fi
    fi
    
    # Verify uv is now available
    if ! command -v uv &> /dev/null; then
        echo -e "${YELLOW}uv not found in PATH. Trying to locate it...${NC}"
        
        # Check common installation locations
        UV_PATHS=(
            "$HOME/.local/bin/uv"
            "$HOME/.cargo/bin/uv"
        )
        
        UV_FOUND=false
        for UV_PATH in "${UV_PATHS[@]}"; do
            if [ -x "$UV_PATH" ]; then
                echo "Found uv at $UV_PATH"
                UV_FOUND=true
                # Use the full path to uv for the rest of the script
                UV_CMD="$UV_PATH"
                break
            fi
        done
        
        if [ "$UV_FOUND" = false ]; then
            echo -e "${RED}Failed to install uv. Please install it manually:${NC}"
            echo "https://github.com/astral-sh/uv"
            echo "After installing, add it to your PATH and run this script again."
            exit 1
        fi
    else
        UV_CMD="uv"
    fi
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "$VENV_DIR" ]; then
        echo "Creating virtual environment using uv..."
        $UV_CMD venv "$VENV_DIR"
    fi
    
    # Install dependencies using uv
    echo "Installing dependencies with uv..."
    $UV_CMD pip install --python "$VENV_DIR/bin/python" -r "$APP_DIR/requirements.txt"
    
    # Get FETCH_INTERVAL from .env or default to hourly
    if [ -f "$APP_DIR/.env" ]; then
        FETCH_INTERVAL=$(grep -E "^FETCH_INTERVAL=" "$APP_DIR/.env" | cut -d= -f2)
    fi
    
    # Default to hourly if FETCH_INTERVAL not found or empty
    if [ -z "$FETCH_INTERVAL" ]; then
        FETCH_INTERVAL="0 * * * *"  # Default: hourly
        echo "FETCH_INTERVAL not found in .env, defaulting to hourly schedule."
    fi
    
    # Set up cron job with the interval from .env
    setup_cron "$FETCH_INTERVAL"
    
    echo -e "${GREEN}Installation complete!${NC}"
    echo "Photoframe will run with schedule: $FETCH_INTERVAL"
    echo "Use '$0 reschedule' to change the schedule."
}

# Reschedule command - changes the cron job schedule
reschedule() {
    echo -e "${YELLOW}Rescheduling photoframe...${NC}"
    
    echo "Enter new cron schedule (e.g., '0 * * * *' for hourly):"
    read -r schedule
    
    setup_cron "$schedule"
    
    echo -e "${GREEN}Photoframe rescheduled!${NC}"
}

# Helper function to set up cron job
setup_cron() {
    local schedule="$1"
    
    # Remove existing cron job if any
    crontab -l 2>/dev/null | grep -v "$APP_DIR/src/photoframe.py" > "$CRON_FILE" || true
    
    # Add new cron job with full path to python in the virtual environment
    echo "$schedule cd $APP_DIR && $VENV_DIR/bin/python $APP_DIR/src/photoframe.py" >> "$CRON_FILE"
    
    # Install new crontab
    crontab "$CRON_FILE"
    rm "$CRON_FILE"
    
    echo "Cron job set with schedule: $schedule"
}

# Stop command - kills running photoframe processes
stop() {
    echo -e "${YELLOW}Stopping photoframe processes...${NC}"
    
    if pgrep -f "python.*photoframe.py" > /dev/null; then
        pkill -f "python.*photoframe.py"
        echo -e "${GREEN}Photoframe processes stopped.${NC}"
    else
        echo -e "${YELLOW}No photoframe processes found running.${NC}"
    fi
}

# Uninstall command - removes cron job and virtual environment
uninstall() {
    echo -e "${YELLOW}Uninstalling photoframe...${NC}"
    
    # Remove cron job
    crontab -l 2>/dev/null | grep -v "$APP_DIR/src/photoframe.py" > "$CRON_FILE" || true
    crontab "$CRON_FILE"
    rm "$CRON_FILE"
    
    # Ask before removing virtual environment
    echo -n "Remove virtual environment? [y/N] "
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo "Removing virtual environment..."
        rm -rf "$VENV_DIR"
    fi
    
    echo -e "${GREEN}Photoframe uninstalled.${NC}"
}

# Main script logic
if [ $# -eq 0 ]; then
    usage
fi

case "$1" in
    install)
        install
        ;;
    reschedule)
        reschedule
        ;;
    stop)
        stop
        ;;
    uninstall)
        uninstall
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        usage
        ;;
esac
